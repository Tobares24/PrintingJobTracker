@page "/jobs/{jobId:int}"
@using PrintingJobTracker.Application.Interfaces
@using PrintingJobTracker.Domain.Entities
@using PrintingJobTracker.Domain.Entities.Enums
@using Microsoft.AspNetCore.Components
@inject IJobService JobService
@inject NavigationManager Navigation
@inject ILogger<JobDetail> Logger

<Spinner IsVisible="@isLoading" DisplayText="@spinnerText" SpinnerColor="text-success" Size="4rem" />

<div class="text-center mt-4">
    <button class="btn btn-primary" @onclick="GoBack">
        <i class="bi bi-arrow-left me-2"></i>Back to Jobs List
    </button>
</div>

<div class="container-fluid py-4">
    @if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading job details...</span>
            </div>
            <p class="mt-3 text-muted">Loading job details...</p>
        </div>
    }
    else if (errorMessage != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <i class="bi bi-exclamation-triangle-fill me-2"></i>
            <strong>Error:</strong> @errorMessage
            <button type="button" class="btn-close" @onclick="() => errorMessage = null"></button>
        </div>
        <div class="text-center mt-4">
            <button class="btn btn-primary" @onclick="GoBack">
                <i class="bi bi-arrow-left me-2"></i>Back to Jobs List
            </button>
        </div>
    }
    else if (job != null)
    {
        <div class="row mb-4">
            <div class="col">
                <nav aria-label="breadcrumb">
                    <ol class="breadcrumb">
                        <li class="breadcrumb-item"><a href="/">Home</a></li>
                        <li class="breadcrumb-item"><a href="/jobs">Jobs</a></li>
                        <li class="breadcrumb-item active" aria-current="page">@job.JobName</li>
                    </ol>
                </nav>
            </div>
        </div>

        <!-- Job Details Card -->
        <div class="row">
            <div class="col-lg-8 mb-4">
                <div class="card shadow-sm">
                    <div class="card-header bg-primary text-white">
                        <h5 class="mb-0">
                            <i class="bi bi-file-text me-2"></i>Job Information
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label class="text-muted small">Job Name</label>
                                <p class="fw-semibold mb-3">@(job.JobName ?? "N/A")</p>
                            </div>
                            <div class="col-md-6">
                                <label class="text-muted small">Job ID</label>
                                <p class="fw-semibold mb-3">#@job.Id</p>
                            </div>
                        </div>

                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label class="text-muted small">Client Name</label>
                                <p class="fw-semibold mb-3">
                                    @if (job.Client != null)
                                    {
                                        @($"{job.Client.FirstName} {job.Client.LastName} {job.Client.SecondLastName}".Trim())
                                    }
                                    else
                                    {
                                        <span class="text-muted">No client assigned</span>
                                    }
                                </p>
                            </div>
                            <div class="col-md-6">
                                <label class="text-muted small">Quantity</label>
                                <p class="fw-semibold mb-3">
                                    <i class="bi bi-stack me-1"></i>@job.Quantity.ToString("N0") units
                                </p>
                            </div>
                        </div>

                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label class="text-muted small">Carrier</label>
                                <p class="fw-semibold mb-3">
                                    <i class="bi bi-truck me-1"></i>@job.Carrier.ToString()
                                </p>
                            </div>
                            <div class="col-md-6">
                                <label class="text-muted small">Created At</label>
                                <p class="fw-semibold mb-3">
                                    <i class="bi bi-calendar-event me-1"></i>@job.CreatedAt.ToLocalTime().ToString("MMM dd, yyyy h:mm tt")
                                </p>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6">
                                <label class="text-muted small">Mail Deadline (SLA)</label>
                                <p class="fw-semibold">
                                    <i class="bi bi-clock-history me-1"></i>
                                    @job.MailDeadline.ToLocalTime().ToString("MMM dd, yyyy h:mm tt")
                                    @if (IsDeadlineApproaching())
                                    {
                                        <span class="badge bg-warning ms-2">Deadline Approaching</span>
                                    }
                                </p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Status Card -->
            <div class="col-lg-4 mb-4">
                <div class="card shadow-sm">
                    <div class="card-header bg-light">
                        <h5 class="mb-0">
                            <i class="bi bi-flag me-2"></i>Status Information
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="text-center mb-4">
                            <label class="text-muted small d-block mb-2">Current Status</label>
                            <span class="badge @GetStatusBadgeClass(job.CurrentStatus) fs-5 px-3 py-2">
                                @GetStatusIcon(job.CurrentStatus) @job.CurrentStatus.ToString()
                            </span>
                        </div>

                        @if (CanAdvanceStatus())
                        {
                            <div class="d-grid gap-2">
                                <button class="btn btn-success" @onclick="AdvanceStatusAsync" disabled="@isProcessing">
                                    @if (isProcessing)
                                    {
                                        <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                        <span>Processing...</span>
                                    }
                                    else
                                    {
                                        <i class="bi bi-arrow-right-circle me-2"></i>
                                        <span>Advance to @GetNextStatus(job.CurrentStatus)</span>
                                    }
                                </button>
                            </div>
                        }
                        else
                        {
                            <div class="alert alert-info mb-0">
                                <i class="bi bi-info-circle me-2"></i>
                                @if (job.CurrentStatus == JobStatus.Delivered)
                                {
                                    <span>This job has been delivered.</span>
                                }
                                else if (job.CurrentStatus == JobStatus.Exception)
                                {
                                    <span>This job has an exception.</span>
                                }
                            </div>
                        }

                        <hr class="my-3" />
                        <label class="text-muted small">Status Progress</label>
                        <div class="progress-vertical mt-2">
                            @foreach (var status in Enum.GetValues<JobStatus>().Where(s => s != JobStatus.Exception))
                            {
                                <div class="d-flex align-items-center mb-2">
                                    <span class="badge @GetProgressBadgeClass(status) me-2">
                                        @if (IsStatusCompleted(status))
                                        {
                                            <i class="bi bi-check-lg"></i>
                                        }
                                        else if (status == job.CurrentStatus)
                                        {
                                            <i class="bi bi-circle-fill"></i>
                                        }
                                        else
                                        {
                                            <i class="bi bi-circle"></i>
                                        }
                                    </span>
                                    <small class="@(IsStatusCompleted(status) ? "text-success" : status == job.CurrentStatus ? "fw-bold" : "text-muted")">
                                        @status.ToString()
                                    </small>
                                </div>
                            }
                        </div>
                    </div>
                </div>

                <!-- Actions Card -->
                <div class="card shadow-sm mt-3">
                    <div class="card-header bg-light">
                        <h6 class="mb-0">
                            <i class="bi bi-gear me-2"></i>Quick Actions
                        </h6>
                    </div>
                    <div class="card-body">
                        <div class="d-grid gap-2">
                            <button class="btn btn-outline-primary btn-sm" @onclick="ViewHistory">
                                <i class="bi bi-clock-history me-2"></i>View History
                            </button>
                            <button class="btn btn-outline-danger btn-sm" @onclick="MarkAsException">
                                <i class="bi bi-exclamation-triangle me-2"></i>Mark as Exception
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        @if (!string.IsNullOrEmpty(successMessage))
        {
            <div class="position-fixed bottom-0 end-0 p-3" style="z-index: 1050">
                <div class="toast show" role="alert">
                    <div class="toast-header bg-success text-white">
                        <i class="bi bi-check-circle-fill me-2"></i>
                        <strong class="me-auto">Success</strong>
                        <button type="button" class="btn-close btn-close-white" @onclick="() => successMessage = null"></button>
                    </div>
                    <div class="toast-body">
                        @successMessage
                    </div>
                </div>
            </div>
        }
    }
</div>

@code {
    [Parameter] public int JobId { get; set; }

    private Job? job;
    private bool isLoading = true;
    private string spinnerText = "Loading job details...";
    private bool isProcessing = false;
    private string? errorMessage;
    private string? successMessage;
    private string traceId = Guid.NewGuid().ToString();

    protected override async Task OnInitializedAsync()
    {
        await LoadJobAsync();
    }

    private async Task LoadJobAsync()
    {
        try
        {
            isLoading = true;
            errorMessage = null;

            Logger.LogInformation("Loading job details for JobId: {JobId}", JobId);
            job = await JobService.GetByIdAsync(traceId, JobId);

            if (job == null)
            {
                errorMessage = $"Job with ID {JobId} was not found.";
                Logger.LogWarning("Job not found: {JobId}", JobId);
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred while loading job details. Please try again later.";
            Logger.LogError(ex, "Error loading job {JobId}", JobId);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task AdvanceStatusAsync()
    {
        if (job == null || isProcessing) return;

        try
        {
            isProcessing = true;
            errorMessage = null;

            var success = await JobService.AdvanceJobStatusAsync(traceId, JobId);

            if (success)
            {
                successMessage = $"Status successfully advanced to {GetNextStatus(job.CurrentStatus)}";
                await LoadJobAsync();

                _ = Task.Run(async () =>
                {
                    await Task.Delay(3000);
                    await InvokeAsync(() =>
                    {
                        successMessage = null;
                        StateHasChanged();
                    });
                });
            }
            else
            {
                errorMessage = "Unable to advance status. Please check the current status.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred while advancing the status.";
            Logger.LogError(ex, "Error advancing status for job {JobId}", JobId);
        }
        finally
        {
            isProcessing = false;
        }
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/jobs");
    }

    private void ViewHistory()
    {
        Navigation.NavigateTo($"/jobs/{JobId}/history");
    }

    private void MarkAsException()
    {
        Navigation.NavigateTo($"/jobs/{JobId}/exception");
    }

    private bool CanAdvanceStatus()
    {
        return job != null &&
               job.CurrentStatus != JobStatus.Delivered &&
               job.CurrentStatus != JobStatus.Exception;
    }

    private bool IsDeadlineApproaching()
    {
        if (job?.MailDeadline == null) return false;
        var timeUntilDeadline = job.MailDeadline - DateTime.UtcNow;
        return timeUntilDeadline.TotalHours <= 24 && timeUntilDeadline.TotalHours > 0;
    }

    private bool IsStatusCompleted(JobStatus status)
    {
        if (job == null) return false;
        return GetStatusOrder(status) < GetStatusOrder(job.CurrentStatus);
    }

    private int GetStatusOrder(JobStatus status)
    {
        return status switch
        {
            JobStatus.Received => 1,
            JobStatus.Printing => 2,
            JobStatus.Inserting => 3,
            JobStatus.Mailed => 4,
            JobStatus.Delivered => 5,
            JobStatus.Exception => 0,
            _ => 0
        };
    }

    private string GetStatusBadgeClass(JobStatus status)
    {
        return status switch
        {
            JobStatus.Received => "bg-info",
            JobStatus.Printing => "bg-primary",
            JobStatus.Inserting => "bg-warning",
            JobStatus.Mailed => "bg-success",
            JobStatus.Delivered => "bg-dark",
            JobStatus.Exception => "bg-danger",
            _ => "bg-secondary"
        };
    }

    private string GetProgressBadgeClass(JobStatus status)
    {
        if (IsStatusCompleted(status))
            return "bg-success";
        if (job != null && status == job.CurrentStatus)
            return GetStatusBadgeClass(status);
        return "bg-light text-dark";
    }

    private string GetStatusIcon(JobStatus status)
    {
        return status switch
        {
            JobStatus.Received => "📥",
            JobStatus.Printing => "🖨️",
            JobStatus.Inserting => "📄",
            JobStatus.Mailed => "📬",
            JobStatus.Delivered => "✅",
            JobStatus.Exception => "⚠️",
            _ => "📋"
        };
    }

    private JobStatus GetNextStatus(JobStatus currentStatus)
    {
        return currentStatus switch
        {
            JobStatus.Received => JobStatus.Printing,
            JobStatus.Printing => JobStatus.Inserting,
            JobStatus.Inserting => JobStatus.Mailed,
            JobStatus.Mailed => JobStatus.Delivered,
            _ => currentStatus
        };
    }
}
