@page "/jobs"
@using Microsoft.AspNetCore.SignalR.Client
@using PrintingJobTracker.Application.DTOs
@using PrintingJobTracker.Application.Interfaces
@inject NavigationManager Navigation
@inject IJobService JobService

<h3>Lista de Jobs</h3>

<button class="btn btn-primary mb-3" @onclick="() => IsCreatingJob = true">
    + Crear Job
</button>

@if (IsCreatingJob)
{
    <div class="modal-overlay">
        <div class="modal-content">
            <JobForm OnSaved="OnJobSaved" OnCancelled="OnJobCancelled" />
        </div>
    </div>
}

<div class="table-responsive">
    <table class="jobs-table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Cliente</th>
                <th>Nombre</th>
                <th>Cantidad</th>
                <th>Carrier</th>
                <th>Estado</th>
                <th>Creado</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var job in Jobs)
            {
                <tr>
                    <td>@job.Id</td>
                    <td>@job.ClientName</td>
                    <td>@job.JobName</td>
                    <td>@job.Quantity</td>
                    <td>@job.Carrier</td>
                    <td>@job.CurrentStatus</td>
                    <td>@job.CreatedAt.ToString("dd/MM/yyyy")</td>
                </tr>
            }
        </tbody>
    </table>
</div>

@if (TotalPages > 1)
{
    <Pagination TotalCount="@TotalCount"
                PageSize="@PageSize"
                CurrentPage="@CurrentPage"
                OnPageChanged="HandlePageChanged" />
}

@code {
    private HubConnection? _hubConnection;
    private List<JobResponse> Jobs = new();
    private int TotalCount;
    private int PageSize = 10;
    private int CurrentPage = 1;
    private int TotalPages => (int)Math.Ceiling((double)TotalCount / PageSize);

    private bool IsCreatingJob = false;

    protected override async Task OnInitializedAsync()
    {
        await InitializeSignalR();
        await LoadJobs();
    }

    private async Task InitializeSignalR()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/hub/app"))
            .WithAutomaticReconnect()
            .Build();

        _hubConnection.On<JobResponse>("JobCreated", async job =>
        {
            await LoadJobs();
            StateHasChanged();
        });

        await _hubConnection.StartAsync();
    }

    private async Task LoadJobs()
    {
        string traceId = Guid.NewGuid().ToString();
        var request = new JobFilterRequest(null, null, null, (CurrentPage - 1) * PageSize, PageSize);
        Jobs = await JobService.GetJobsAsync(traceId, request);
        TotalCount = Jobs.Count();
    }

    private async Task HandlePageChanged(int newPage)
    {
        CurrentPage = newPage;
        await LoadJobs();
    }

    private async Task OnJobSaved()
    {
        IsCreatingJob = false;
        await LoadJobs();
    }

    private Task OnJobCancelled()
    {
        IsCreatingJob = false;
        return Task.CompletedTask;
    }

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
            await _hubConnection.DisposeAsync();
    }
}
