@using PrintingJobTracker.Application.DTOs
@using PrintingJobTracker.Application.Interfaces

<InputText placeholder="Buscar cliente..." @bind-Value="SearchTerm" @bind-Value:event="oninput" class="form-control mb-2" />

<InputSelect class="form-control" @bind-Value="SelectedClientId">
    <option value="">-- Selecciona un cliente --</option>
    @foreach (var client in Clients)
    {
        <option value="@client.Id">@client.Name</option>
    }
</InputSelect>

@code {
    [Inject] private IClientService ClientService { get; set; } = null!;

    [Parameter] public Guid SelectedClientId { get; set; }
    [Parameter] public EventCallback<Guid> SelectedClientIdChanged { get; set; }

    private string? SearchTerm { get; set; }
    private List<ClientResponse> Clients { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadClientsAsync();
    }

    private async Task LoadClientsAsync()
    {
        string traceId = Guid.NewGuid().ToString();
        var filter = new ClientFilterRequest
        {
            SearchTerm = SearchTerm,
        };
        Clients = await ClientService.GetClientsAsync(traceId, filter);
        StateHasChanged();
    }

    private async Task OnSearchTermChanged(ChangeEventArgs e)
    {
        SearchTerm = e.Value?.ToString();
        await LoadClientsAsync();
    }

    private async Task SelectedClientChanged(ChangeEventArgs e)
    {
        if (Guid.TryParse(e.Value?.ToString(), out var id))
        {
            SelectedClientId = id;
        }

        await SelectedClientIdChanged.InvokeAsync(SelectedClientId);
    }
}
