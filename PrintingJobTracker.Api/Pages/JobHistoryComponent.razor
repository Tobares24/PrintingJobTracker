@page "/jobs/{JobId:int}/history"
@using PrintingJobTracker.Api.Components
@using PrintingJobTracker.Application.Interfaces
@using PrintingJobTracker.Domain.Entities
@using PrintingJobTracker.Domain.Entities.Enums
@inject IJobService JobService
@inject NavigationManager Navigation
@inject ILogger<JobHistoryComponent> Logger
@attribute [Authorize]

<Spinner IsVisible="@isLoading" DisplayText="@spinnerText" SpinnerColor="text-primary" Size="3rem" />
<Alert @ref="alertComponent" />

<div class="container py-4">
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <strong>Error:</strong> @errorMessage
            <button type="button" class="btn-close" @onclick="() => errorMessage = null"></button>
        </div>
    }
    else if (!isLoading)
    {
        <div class="mb-4">
            <h3>
                <i class="bi bi-clock-history me-2"></i>
                Job History for: @jobName
            </h3>
            <button class="btn btn-primary mt-2" @onclick="GoBack">
                <i class="bi bi-arrow-left me-2"></i>Back to Job Details
            </button>
        </div>

        @if (history != null && history.Any())
        {
            <div class="table-responsive shadow-sm">
                <table class="table table-striped table-hover align-middle">
                    <thead class="table-light">
                        <tr>
                            <th>Status</th>
                            <th>Note</th>
                            <th>Changed At</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in history.OrderByDescending(h => h.ChangedAt))
                        {
                            <tr>
                                <td>
                                    <span class="badge @GetStatusBadgeClass(item.Status.ToString())">
                                        @item.Status.ToString()
                                    </span>
                                </td>
                                <td>@(string.IsNullOrWhiteSpace(item.Note) ? "No note provided" : item.Note)</td>
                                <td>@item.ChangedAt.ToLocalTime().ToString("MMM dd, yyyy")</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <div class="alert alert-info mt-3">
                <i class="bi bi-info-circle me-2"></i>No history available for this job.
            </div>
        }
    }
</div>

@code {
    [Parameter] public int JobId { get; set; }

    private Alert? alertComponent;
    private List<JobStatusHistory>? history;
    private string jobName = string.Empty;
    private bool isLoading = true;
    private string spinnerText = "Loading job history...";
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadJobHistoryAsync();
    }

    private async Task LoadJobHistoryAsync()
    {
        try
        {
            isLoading = true;
            errorMessage = null;

            var job = await JobService.GetByIdAsync(Guid.NewGuid().ToString(), JobId);
            if (job is null)
            {
                NotFound();
                return;
            }

            jobName = job.JobName ?? $"Job #{JobId}";
            history = await JobService.GetJobHistoryAsync(Guid.NewGuid().ToString(), JobId);
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred while loading job history. Please try again later.";
            await alertComponent!.ShowAlert(errorMessage);
            Logger.LogError(ex, "Error loading job history for JobId {JobId}", JobId);
        }
        finally
        {
            isLoading = false;
        }
    }

    private void NotFound()
    {
        Navigation.NavigateTo("/notfound");
    }

    private void GoBack()
    {
        Navigation.NavigateTo($"/jobs/{JobId}");
    }

    private string GetStatusBadgeClass(string status)
    {
        return status switch
        {
            "Received" => "bg-info",
            "Printing" => "bg-primary",
            "Inserting" => "bg-warning text-dark",
            "Mailed" => "bg-success",
            "Delivered" => "bg-dark",
            "Exception" => "bg-danger",
            _ => "bg-secondary"
        };
    }
}
