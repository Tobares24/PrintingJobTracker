@using PrintingJobTracker.Application.Services
@inject JobService JobService
@inject NavigationManager NavigationManager

<div class="card">
    <div class="card-header d-flex justify-content-between align-items-center">
        <div class="d-flex gap-2">
            <input class="form-control" style="width:220px" placeholder="Filtrar por nombre..."
                   @bind="filter.JobName" @bind:event="oninput" />
            <input class="form-control" type="date" @bind="mailFromString" />
            <input class="form-control" type="date" @bind="mailToString" />
            <button class="btn btn-secondary" @onclick="ApplyFilters">Filtrar</button>
        </div>
        <button class="btn btn-primary" @onclick="CreateClicked">Crear Job</button>
    </div>

    <div class="card-body p-0">
        <table class="table table-striped mb-0">
            <thead>
                <tr>
                    <th>JobName</th>
                    <th>MailDeadline</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @if (jobs is null)
                {
                    <tr><td colspan="3">Cargando...</td></tr>
                }
                else if (!jobs.Any())
                {
                    <tr><td colspan="3">Sin resultados</td></tr>
                }
                else
                {
                    @foreach (var j in jobs)
                    {
                        <tr>
                            <td>@j.JobName</td>
                            <td>@j.MailDeadline:yyyy-MM-dd</td>
                            <td>
                                <button class="btn btn-sm btn-outline-primary" @onclick="() => EditClicked(j)">Editar</button>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>

    <div class="card-footer">
        <Pagination Skip="@filter.Skip" Take="@filter.Take" OnChange="OnPageChanged" />
    </div>
</div>

@code {
    private JobFilterRequest filter = new("", null, null, 0, 10);
    private List<Job>? jobs;
    private string? mailFromString;
    private string? mailToString;
    private HubConnection? hubConnection;

    [Parameter] public EventCallback OnReloaded { get; set; }
    [Parameter] public EventCallback<Job> OnEdit { get; set; }
    [Parameter] public EventCallback OnCreate { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();

        // Setup SignalR client in browser to receive notifications
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/apphub"))
            .WithAutomaticReconnect()
            .Build();

        hubConnection.On<Job>("job_added", async (job) =>
        {
            await LoadAsync();
            StateHasChanged();
        });

        hubConnection.On<Job>("job_updated", async (job) =>
        {
            await LoadAsync();
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    public async Task ReloadAsync()
    {
        await LoadAsync();
        await OnReloaded.InvokeAsync();
    }

    private async Task LoadAsync()
    {
        jobs = (await JobService.GetJobsAsync(filter)).ToList();
    }

    private void CreateClicked() => OnCreate.InvokeAsync();

    private void EditClicked(Job job) => OnEdit.InvokeAsync(job);

    private async Task OnPageChanged((int skip, int take) args)
    {
        filter = filter with { Skip = args.skip, Take = args.take };
        await LoadAsync();
    }

    private async Task ApplyFilters()
    {
        filter = filter with
        {
            JobName = string.IsNullOrWhiteSpace(filter.JobName) ? null : filter.JobName,
            MailDeadlineFrom = string.IsNullOrWhiteSpace(mailFromString) ? null : DateTime.Parse(mailFromString!),
            MailDeadlineTo = string.IsNullOrWhiteSpace(mailToString) ? null : DateTime.Parse(mailToString!)
        };
        filter = filter with { Skip = 0 }; // reset page
        await LoadAsync();
    }

    public void Dispose()
    {
        _ = hubConnection?.DisposeAsync();
    }
}