@if (TotalPages > 1)
{
    <div class="pagination-container">
        <div class="pagination-info">
            Mostrando @((CurrentPage - 1) * PageSize + 1) - @Math.Min(CurrentPage * PageSize, TotalCount) de @TotalCount registros
        </div>
        <div class="pagination-controls">
            <button class="pagination-btn" 
                    @onclick="GoToFirstPage" 
                    disabled="@(CurrentPage == 1)">
                ««
            </button>
            <button class="pagination-btn" 
                    @onclick="GoToPreviousPage" 
                    disabled="@(CurrentPage == 1)">
                «
            </button>
            
            @foreach (var page in GetPageNumbers())
            {
                <button class="pagination-btn @(page == CurrentPage ? "active" : "")" 
                        @onclick="() => GoToPage(page)">
                    @page
                </button>
            }
            
            <button class="pagination-btn" 
                    @onclick="GoToNextPage" 
                    disabled="@(CurrentPage == TotalPages)">
                »
            </button>
            <button class="pagination-btn" 
                    @onclick="GoToLastPage" 
                    disabled="@(CurrentPage == TotalPages)">
                »»
            </button>
        </div>
    </div>
}

@code {
    [Parameter]
    public int TotalCount { get; set; }

    [Parameter]
    public int PageSize { get; set; } = 10;

    [Parameter]
    public int CurrentPage { get; set; } = 1;

    [Parameter]
    public EventCallback<int> OnPageChanged { get; set; }

    private int TotalPages => (int)Math.Ceiling((double)TotalCount / PageSize);

    private async Task GoToPage(int page)
    {
        if (page >= 1 && page <= TotalPages && page != CurrentPage)
        {
            await OnPageChanged.InvokeAsync(page);
        }
    }

    private Task GoToFirstPage() => GoToPage(1);
    private Task GoToPreviousPage() => GoToPage(CurrentPage - 1);
    private Task GoToNextPage() => GoToPage(CurrentPage + 1);
    private Task GoToLastPage() => GoToPage(TotalPages);

    private IEnumerable<int> GetPageNumbers()
    {
        var startPage = Math.Max(1, CurrentPage - 2);
        var endPage = Math.Min(TotalPages, CurrentPage + 2);

        if (CurrentPage <= 3)
        {
            endPage = Math.Min(5, TotalPages);
        }
        else if (CurrentPage >= TotalPages - 2)
        {
            startPage = Math.Max(1, TotalPages - 4);
        }

        return Enumerable.Range(startPage, endPage - startPage + 1);
    }
}

<style>
    .pagination-container {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-top: 1.5rem;
        padding: 1rem 0;
        flex-wrap: wrap;
        gap: 1rem;
    }

    .pagination-info {
        color: #666;
        font-size: 0.9rem;
    }

    .pagination-controls {
        display: flex;
        gap: 0.25rem;
    }

    .pagination-btn {
        padding: 0.5rem 0.75rem;
        border: 1px solid #ddd;
        background: white;
        cursor: pointer;
        transition: all 0.2s;
        font-size: 0.9rem;
        min-width: 40px;
    }

    .pagination-btn:hover:not(:disabled) {
        background: #f5f5f5;
        border-color: #007bff;
    }

    .pagination-btn.active {
        background: #007bff;
        color: white;
        border-color: #007bff;
    }

    .pagination-btn:disabled {
        opacity: 0.5;
        cursor: not-allowed;
    }

    @media (max-width: 768px) {
        .pagination-container {
            justify-content: center;
            text-align: center;
        }

        .pagination-info {
            width: 100%;
            margin-bottom: 0.5rem;
        }
    }
</style>