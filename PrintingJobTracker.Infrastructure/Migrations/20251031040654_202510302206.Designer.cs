// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PrintingJobTracker.Infrastructure.Persistence;

#nullable disable

namespace PrintingJobTracker.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251031040654_202510302206")]
    partial class _202510302206
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PrintingJobTracker.Domain.Entities.AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier for the audit record.");

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Type of action performed: Create, Update, or Delete.");

                    b.Property<string>("EntityId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Identifier of the entity instance that was modified.");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasComment("Name of the entity that was affected (e.g., Job, Client).");

                    b.Property<string>("NewRecord")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Serialized JSON of the entity state after the operation.");

                    b.Property<DateTime>("OcurredOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("UTC timestamp indicating when the operation occurred.");

                    b.Property<string>("PreviousRecord")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Serialized JSON of the entity state before the operation.");

                    b.HasKey("Id")
                        .HasName("PK_AuditLogs");

                    b.HasIndex("OcurredOn")
                        .HasDatabaseName("IX_AuditLogs_OcurredOn");

                    b.HasIndex("EntityName", "EntityId")
                        .HasDatabaseName("IX_AuditLogs_EntityName_EntityId");

                    b.ToTable("AuditLogTable", null, t =>
                        {
                            t.HasComment("Stores all audit trail entries recording create, update, and delete operations across entities.");
                        });
                });

            modelBuilder.Entity("PrintingJobTracker.Domain.Entities.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Unique identifier for the client.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Client's first name or company legal name.");

                    b.Property<string>("IdentityCard")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("National ID or business identification number for the client.");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Indicates whether the client record is logically deleted.");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Client's last name (if applicable).");

                    b.Property<string>("SecondLastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Client's second last name (optional).");

                    b.HasKey("Id")
                        .HasName("PK_Clients");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("IdentityCard")
                        .IsUnique()
                        .HasDatabaseName("IX_Clients_IdentityCard");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Clients_IsDeleted");

                    b.HasIndex("FirstName", "LastName")
                        .HasDatabaseName("IX_Clients_FirstName_LastName");

                    b.ToTable("ClientTable", null, t =>
                        {
                            t.HasComment("Stores information about clients who request printing jobs.");
                        });
                });

            modelBuilder.Entity("PrintingJobTracker.Domain.Entities.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Unique identifier for the job.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Carrier")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Name of the carrier handling the delivery (e.g., USPS, UPS, FedEx).");

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasComment("Unique identifier of the client associated with the job.");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasComment("UTC date and time when the job was created.");

                    b.Property<string>("CurrentStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Current processing status of the job (Received, Printing, Inserting, etc.).");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("JobName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Descriptive name of the printing job.");

                    b.Property<DateTime>("MailDeadline")
                        .HasColumnType("datetime2")
                        .HasComment("Deadline by which the job must be mailed according to the SLA (Service Level Agreement).");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasComment("Number of items or copies to be produced for this job.");

                    b.HasKey("Id")
                        .HasName("PK_Jobs");

                    b.HasIndex("ClientId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("JobTable", null, t =>
                        {
                            t.HasComment("Stores information about printing jobs and their current status in the production process.");
                        });
                });

            modelBuilder.Entity("PrintingJobTracker.Domain.Entities.JobStatusHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Unique identifier for the job status history record.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("datetime2")
                        .HasComment("UTC timestamp when this status change occurred.");

                    b.Property<int>("JobId")
                        .HasColumnType("int")
                        .HasComment("Foreign key referencing the related Job entity.");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Optional note explaining details or exceptions related to the status change.");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Represents the job status at this point in time (e.g., Received, Printing, Mailed, etc.).");

                    b.HasKey("Id")
                        .HasName("PK_JobStatusHistory");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("JobId", "Status", "ChangedAt")
                        .HasDatabaseName("IX_JobStatusHistory_JobId_Status_ChangedAt");

                    b.ToTable("JobStatusHistoryTable", null, t =>
                        {
                            t.HasComment("Stores the historical records of job status changes over time.");
                        });
                });

            modelBuilder.Entity("PrintingJobTracker.Domain.Entities.Job", b =>
                {
                    b.HasOne("PrintingJobTracker.Domain.Entities.Client", "Client")
                        .WithMany("Jobs")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Jobs_Clients");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("PrintingJobTracker.Domain.Entities.JobStatusHistory", b =>
                {
                    b.HasOne("PrintingJobTracker.Domain.Entities.Job", "Job")
                        .WithMany("StatusHistory")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_JobStatusHistory_Job");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("PrintingJobTracker.Domain.Entities.Client", b =>
                {
                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("PrintingJobTracker.Domain.Entities.Job", b =>
                {
                    b.Navigation("StatusHistory");
                });
#pragma warning restore 612, 618
        }
    }
}
